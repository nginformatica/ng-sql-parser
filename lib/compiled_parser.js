/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,8],$V1=[5,29],$V2=[1,14],$V3=[1,13],$V4=[5,29,34,45],$V5=[1,17],$V6=[5,29,34,45,48,65],$V7=[1,25],$V8=[1,30],$V9=[1,29],$Va=[1,32],$Vb=[1,42],$Vc=[1,46],$Vd=[1,47],$Ve=[1,43],$Vf=[1,44],$Vg=[1,41],$Vh=[1,45],$Vi=[1,27],$Vj=[5,29,34],$Vk=[5,29,34,45,48],$Vl=[1,59],$Vm=[1,65],$Vn=[19,46],$Vo=[1,69],$Vp=[1,70],$Vq=[1,71],$Vr=[1,72],$Vs=[1,73],$Vt=[5,19,26,27,29,34,37,38,40,41,43,45,46,48,65,67,68,70,71,72,73,74,75,77,80,82,84,85,91,92,93,94,95,96,98,101],$Vu=[1,81],$Vv=[1,80],$Vw=[5,19,26,27,29,34,37,38,40,41,43,45,46,47,48,54,65,67,68,70,71,72,73,74,75,77,78,80,82,84,85,91,92,93,94,95,96,98,101],$Vx=[5,19,26,27,29,30,34,37,38,39,40,41,43,45,46,47,48,54,65,67,68,70,71,72,73,74,75,77,78,80,82,84,85,91,92,93,94,95,96,97,98,101],$Vy=[2,82],$Vz=[1,95],$VA=[1,102],$VB=[1,113],$VC=[1,114],$VD=[1,122],$VE=[5,29,34,45,46,47],$VF=[1,130],$VG=[5,29,34,45,46,48,67],$VH=[2,110],$VI=[5,29,34,43,45,48,65],$VJ=[1,142],$VK=[1,143],$VL=[1,144],$VM=[1,145],$VN=[2,26],$VO=[1,148],$VP=[1,149],$VQ=[5,19,26,27,29,34,37,38,40,41,43,45,46,48,65,67,68,70,71,77,80,82,84,85,91,92,93,94,95,96,98,101],$VR=[70,71,84],$VS=[5,29,34,45,46,48,65,82],$VT=[5,29,34,37,38,40,41,43,45,48,65],$VU=[1,176],$VV=[5,29,34,37,38,39,40,41,43,45,48,65],$VW=[2,30],$VX=[5,29,34,45,59,61];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Root":3,"Query":4,"EOF":5,"SelectQuery":6,"Unions":7,"SelectWithLimitQuery":8,"BasicSelectQuery":9,"Select":10,"OrderClause":11,"GroupClause":12,"LimitClause":13,"SelectClause":14,"WhereClause":15,"SELECT":16,"Top":17,"Fields":18,"FROM":19,"Table":20,"Joins":21,"Expression":22,"DISTINCT":23,"TOP":24,"Literal":25,"AS":26,"LEFT_PAREN":27,"List":28,"RIGHT_PAREN":29,"WINDOW":30,"WINDOW_FUNCTION":31,"Number":32,"Union":33,"UNION":34,"ALL":35,"Join":36,"INNER":37,"JOIN":38,"ON":39,"LEFT":40,"RIGHT":41,"OUTER":42,"WHERE":43,"InConditions":44,"LIMIT":45,"SEPARATOR":46,"OFFSET":47,"ORDER":48,"BY":49,"OrderArgs":50,"OffsetClause":51,"OrderArg":52,"Value":53,"DIRECTION":54,"OffsetRows":55,"FetchClause":56,"ROW":57,"ROWS":58,"FETCH":59,"FIRST":60,"ONLY":61,"NEXT":62,"GroupBasicClause":63,"HavingClause":64,"GROUP":65,"ArgumentList":66,"HAVING":67,"CASE":68,"CaseBodies":69,"END":70,"ELSE":71,"MATH":72,"MATH_MULTI":73,"OPERATOR":74,"BETWEEN":75,"BetweenExpression":76,"CONDITIONAL":77,"SUB_SELECT_OP":78,"SubSelectExpression":79,"SUB_SELECT_UNARY_OP":80,"ExpressionList":81,"IN":82,"CaseBody":83,"WHEN":84,"THEN":85,"String":86,"Function":87,"UserFunction":88,"Boolean":89,"Parameter":90,"NUMBER":91,"BOOLEAN":92,"PARAMETER":93,"STRING":94,"DBLSTRING":95,"LITERAL":96,"DOT":97,"FUNCTION":98,"AggregateArgumentList":99,"Field":100,"STAR":101,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",16:"SELECT",19:"FROM",23:"DISTINCT",24:"TOP",26:"AS",27:"LEFT_PAREN",29:"RIGHT_PAREN",30:"WINDOW",31:"WINDOW_FUNCTION",34:"UNION",35:"ALL",37:"INNER",38:"JOIN",39:"ON",40:"LEFT",41:"RIGHT",42:"OUTER",43:"WHERE",45:"LIMIT",46:"SEPARATOR",47:"OFFSET",48:"ORDER",49:"BY",54:"DIRECTION",57:"ROW",58:"ROWS",59:"FETCH",60:"FIRST",61:"ONLY",62:"NEXT",65:"GROUP",67:"HAVING",68:"CASE",70:"END",71:"ELSE",72:"MATH",73:"MATH_MULTI",74:"OPERATOR",75:"BETWEEN",77:"CONDITIONAL",78:"SUB_SELECT_OP",80:"SUB_SELECT_UNARY_OP",82:"IN",84:"WHEN",85:"THEN",91:"NUMBER",92:"BOOLEAN",93:"PARAMETER",94:"STRING",95:"DBLSTRING",96:"LITERAL",97:"DOT",98:"FUNCTION",101:"STAR"},
productions_: [0,[3,2],[4,1],[4,2],[6,1],[6,1],[9,1],[9,2],[9,2],[9,3],[8,2],[10,1],[10,2],[14,6],[14,5],[14,5],[14,6],[14,6],[14,4],[14,4],[14,5],[14,5],[14,5],[14,6],[14,6],[17,2],[20,1],[20,2],[20,3],[20,3],[20,3],[20,4],[20,6],[7,1],[7,2],[33,2],[33,3],[21,1],[21,2],[36,5],[36,4],[36,5],[36,5],[36,6],[36,6],[36,6],[36,6],[15,2],[15,2],[13,2],[13,4],[13,4],[11,3],[11,4],[50,1],[50,3],[52,1],[52,2],[51,2],[51,3],[55,2],[55,2],[56,4],[56,4],[12,1],[12,2],[63,3],[64,2],[22,4],[22,6],[22,3],[22,3],[22,3],[22,3],[22,3],[22,3],[22,5],[22,3],[22,2],[22,1],[22,1],[44,3],[81,1],[81,3],[81,3],[69,1],[69,2],[83,4],[76,3],[79,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[28,1],[32,1],[89,1],[90,1],[86,1],[86,1],[25,1],[25,3],[87,4],[88,3],[88,4],[99,1],[99,2],[66,1],[66,3],[18,1],[18,3],[100,1],[100,1],[100,3],[100,2]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return this.$ = $$[$0-1];
break;
case 2: case 4: case 5: case 6: case 11: case 25: case 64: case 79: case 80: case 85: case 90: case 91: case 92: case 93: case 94: case 95: case 96:
this.$ = $$[$0];
break;
case 3:
this.$ = (function () {
        $$[$0-1].unions = $$[$0];
        return $$[$0-1];
      }());
break;
case 7:
this.$ = (function () {
        $$[$0-1].order = $$[$0];
        return $$[$0-1];
      }());
break;
case 8:
this.$ = (function () {
        $$[$0-1].group = $$[$0];
        return $$[$0-1];
      }());
break;
case 9:
this.$ = (function () {
        $$[$0-2].group = $$[$0-1];
        $$[$0-2].order = $$[$0];
        return $$[$0-2];
      }());
break;
case 10:
this.$ = (function () {
        $$[$0-1].limit = $$[$0];
        return $$[$0-1];
      }());
break;
case 12:
this.$ = (function () {
        $$[$0-1].where = $$[$0];
        return $$[$0-1];
      }());
break;
case 13:
this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0], [], $$[$0-4]);
break;
case 14: case 15:
this.$ = new yy.Select($$[$0-2], $$[$0], false, [], [], $$[$0-3]);
break;
case 16: case 17:
this.$ = new yy.Select($$[$0-2], $$[$0], true, [], [], $$[$0-3]);
break;
case 18: case 19:
this.$ = new yy.Select($$[$0-2], $$[$0], false);
break;
case 20:
this.$ = new yy.Select($$[$0-2], $$[$0], true);
break;
case 21: case 22:
this.$ = new yy.Select($$[$0-3], $$[$0-1], false, $$[$0]);
break;
case 23: case 24:
this.$ = new yy.Select($$[$0-3], $$[$0-1], true, $$[$0]);
break;
case 26:
this.$ = new yy.Table($$[$0]);
break;
case 27:
this.$ = new yy.Table($$[$0-1], $$[$0]);
break;
case 28:
this.$ = new yy.Table($$[$0-2], $$[$0]);
break;
case 29: case 60: case 61: case 62: case 63: case 70: case 84:
this.$ = $$[$0-1];
break;
case 30: case 89:
this.$ = new yy.SubSelect($$[$0-1]);
break;
case 31:
this.$ = new yy.SubSelect($$[$0-2], $$[$0]);
break;
case 32:
this.$ = new yy.Table($$[$0-5], null, $$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 33: case 37: case 54: case 82: case 110: case 112:
this.$ = [$$[$0]];
break;
case 34:
this.$ = $$[$0-1].concat($$[$01]);
break;
case 35:
this.$ = new yy.Union($$[$0]);
break;
case 36:
this.$ = new yy.Union($$[$0], true);
break;
case 38: case 86:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 39:
this.$ = new yy.Join($$[$0-2], $$[$0], '', 'INNER');
break;
case 40:
this.$ = new yy.Join($$[$0-2], $$[$0]);
break;
case 41:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT');
break;
case 42:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT');
break;
case 43:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'INNER');
break;
case 44:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'INNER');
break;
case 45:
this.$ = new yy.Join($$[$0-2], $$[$0], 'LEFT', 'OUTER');
break;
case 46:
this.$ = new yy.Join($$[$0-2], $$[$0], 'RIGHT', 'OUTER');
break;
case 47: case 48:
this.$ = new yy.Where($$[$0]);
break;
case 49:
this.$ = new yy.Limit($$[$0]);
break;
case 50:
this.$ = new yy.Limit($$[$0], $$[$0-2]);
break;
case 51:
this.$ = new yy.Limit($$[$0-2], $$[$0]);
break;
case 52:
this.$ = new yy.Order($$[$0]);
break;
case 53:
this.$ = new yy.Order($$[$0-1], $$[$0]);
break;
case 55: case 111: case 113:
this.$ = $$[$0-2].concat($$[$0]);
break;
case 56:
this.$ = new yy.OrderArgument($$[$0], 'ASC');
break;
case 57:
this.$ = new yy.OrderArgument($$[$0-1], $$[$0]);
break;
case 58:
this.$ = new yy.Offset($$[$0]);
break;
case 59:
this.$ = new yy.Offset($$[$0-1], $$[$0]);
break;
case 65:
this.$ = (function () {
        $$[$0-1].having = $$[$0];
        return $$[$0-1];
      }());
break;
case 66:
this.$ = new yy.Group($$[$0]);
break;
case 67:
this.$ = new yy.Having($$[$0]);
break;
case 68:
this.$ = new yy.Case($$[$0-2], $$[$0-1]);
break;
case 69:
this.$ = new yy.Case($$[$0-4], $$[$0-3], $$[$0-1]);
break;
case 71: case 72: case 73: case 74: case 75: case 77:
this.$ = new yy.Op($$[$0-1], $$[$0-2], $$[$0]);
break;
case 76:
this.$ = new yy.Op($$[$0-3], $$[$0-4], $$[$0-1]);
break;
case 78:
this.$ = new yy.UnaryOp($$[$0-1], $$[$0]);
break;
case 81:
this.$ = new yy.InConditions($$[$0-2], $$[$0]);
break;
case 83:
this.$ = new yy.ExpressionList($$[$0-2], $$[$0]);
break;
case 87:
this.$ = [new yy.CaseBody($$[$0-2], $$[$0])];
break;
case 88:
this.$ = new yy.BetweenOp([$$[$0-2], $$[$0]]);
break;
case 97:
this.$ = new yy.ListValue($$[$0]);
break;
case 98:
this.$ = new yy.NumberValue($$[$0]);
break;
case 99:
this.$ = new yy.BooleanValue($$[$0]);
break;
case 100:
this.$ = new yy.ParameterValue($$[$0]);
break;
case 101:
this.$ = new yy.StringValue($$[$0], "'");
break;
case 102:
this.$ = new yy.StringValue($$[$0], '"');
break;
case 103:
this.$ = new yy.LiteralValue($$[$0]);
break;
case 104:
this.$ = new yy.LiteralValue($$[$0-2], $$[$0]);
break;
case 105:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1]);
break;
case 106:
this.$ = new yy.FunctionValue($$[$0-2], null, true);
break;
case 107:
this.$ = new yy.FunctionValue($$[$0-3], $$[$0-1], true);
break;
case 108:
this.$ = new yy.ArgumentListValue($$[$0]);
break;
case 109:
this.$ = new yy.ArgumentListValue($$[$0], true);
break;
case 114:
this.$ = new yy.Star();
break;
case 115:
this.$ = new yy.Field($$[$0]);
break;
case 116:
this.$ = new yy.Field($$[$0-2], $$[$0]);
break;
case 117:
this.$ = new yy.Field($$[$0-1], $$[$0]);
break;
}
},
table: [{3:1,4:2,6:3,8:4,9:5,10:6,14:7,16:$V0},{1:[3]},{5:[1,9]},o($V1,[2,2],{7:10,13:11,33:12,34:$V2,45:$V3}),o($V4,[2,4]),o($V4,[2,5]),o($V4,[2,6],{11:15,12:16,63:18,48:$V5,65:[1,19]}),o($V6,[2,11],{15:20,43:[1,21]}),{17:22,18:24,22:28,23:[1,23],24:$V7,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh,100:26,101:$Vi},{1:[2,1]},o($V1,[2,3],{33:48,34:$V2}),o($V4,[2,10]),o($Vj,[2,33]),{32:49,91:$Vb},{6:50,8:4,9:5,10:6,14:7,16:$V0,35:[1,51]},o($V4,[2,7]),o($V4,[2,8],{11:52,48:$V5}),{49:[1,53]},o($Vk,[2,64],{64:54,67:[1,55]}),{49:[1,56]},o($V6,[2,12]),{22:57,25:34,27:$Vl,32:35,44:58,53:31,68:$V9,79:33,80:$Va,81:60,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{18:61,22:28,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh,100:26,101:$Vi},{17:62,18:63,22:28,24:$V7,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh,100:26,101:$Vi},{19:[1,64],46:$Vm},{22:66,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vn,[2,112]),o($Vn,[2,114]),o($Vn,[2,115],{25:68,26:[1,67],72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,96:$Vg}),{22:74,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{4:76,6:3,8:4,9:5,10:6,14:7,16:$V0,22:75,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vt,[2,80],{78:[1,77]}),{27:[1,79],79:78},o($Vt,[2,79]),o([5,19,26,29,34,37,38,40,41,43,45,46,47,48,54,65,67,68,70,71,72,73,74,75,77,78,80,82,84,85,91,92,93,94,95,96,98,101],[2,90],{27:$Vu,97:$Vv}),o($Vw,[2,91]),o($Vw,[2,92]),o($Vw,[2,93]),o($Vw,[2,94]),o($Vw,[2,95]),o($Vw,[2,96]),o($Vx,[2,103]),o([5,19,26,27,29,34,37,38,40,41,43,45,46,47,48,54,57,58,65,67,68,70,71,72,73,74,75,77,78,80,82,84,85,91,92,93,94,95,96,98,101],[2,98]),o($Vw,[2,101]),o($Vw,[2,102]),{27:[1,82]},o($Vw,[2,99]),o($Vw,[2,100]),o($Vj,[2,34]),o($V4,[2,49],{46:[1,83],47:[1,84]}),o($Vj,[2,35],{13:11,45:$V3}),{6:85,8:4,9:5,10:6,14:7,16:$V0},o($V4,[2,9]),{25:34,32:35,50:86,52:87,53:88,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vk,[2,65]),{22:89,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:91,25:34,27:$V8,32:35,53:31,66:90,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($V6,[2,47],{46:$Vy,82:$Vy,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($V6,[2,48]),{4:76,6:3,8:4,9:5,10:6,14:7,16:$V0,22:92,25:34,27:$Vl,32:35,53:31,68:$V9,79:33,80:$Va,81:93,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{46:$Vz,82:[1,94]},{19:[1,96],46:$Vm},{18:97,22:28,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh,100:26,101:$Vi},{19:[1,98],46:$Vm},{20:99,22:100,25:101,27:$VA,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:28,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh,100:103,101:$Vi},o([27,68,80,91,92,93,94,95,96,98,101],[2,25],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),{25:104,96:$Vg},o($Vn,[2,117],{97:$Vv}),{22:105,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:106,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:107,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:109,25:34,27:$V8,32:35,53:31,68:$V9,76:108,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:110,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{69:111,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,83:112,84:$VB},{29:$VC,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs},{29:[1,115]},{27:[1,116],79:117},o($Vt,[2,78]),{4:76,6:3,8:4,9:5,10:6,14:7,16:$V0},{96:[1,118]},{22:91,23:$VD,25:34,27:$V8,29:[1,119],32:35,53:31,66:121,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh,99:120},{22:91,23:$VD,25:34,27:$V8,32:35,53:31,66:121,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh,99:123},{32:124,91:$Vb},{32:125,91:$Vb},o($Vj,[2,36],{13:11,45:$V3}),o($V4,[2,52],{51:126,46:[1,127],47:[1,128]}),o($VE,[2,54]),o($VE,[2,56],{54:[1,129]}),o($Vk,[2,67],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o([5,29,34,45,48,67],[2,66],{46:$VF}),o($VG,$VH,{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),{29:$VC,46:$Vy,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs},{29:[1,131],46:$Vz},{22:133,25:34,27:$Vl,32:35,53:31,68:$V9,79:33,80:$Va,81:132,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:134,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{20:135,22:136,25:101,27:$VA,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{19:[1,137],46:$Vm},{20:138,22:139,25:101,27:$VA,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($VI,[2,18],{21:140,36:141,37:$VJ,38:$VK,40:$VL,41:$VM}),o($VI,[2,19],{36:141,21:146,37:$VJ,38:$VK,40:$VL,41:$VM,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o([5,29,34,37,38,40,41,43,45,48,65,72,73,74,75,77,78],$VN,{25:147,26:$VO,27:$Vu,30:$VP,96:$Vg,97:$Vv}),{4:151,6:3,8:4,9:5,10:6,14:7,16:$V0,22:152,25:34,27:$V8,28:150,32:35,53:31,66:153,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vn,[2,113]),o($Vn,[2,116],{97:$Vv}),o([5,19,26,27,29,34,37,38,40,41,43,45,46,48,65,67,68,70,71,72,74,77,80,82,84,85,91,92,93,94,95,96,98,101],[2,71],{73:$Vp,75:$Vr}),o([5,19,26,27,29,34,37,38,40,41,43,45,46,48,65,67,68,70,71,72,73,74,77,80,82,84,85,91,92,93,94,95,96,98,101],[2,72],{75:$Vr}),o([5,19,26,27,29,34,37,38,40,41,43,45,46,48,65,67,68,70,71,74,77,80,82,84,85,91,92,93,94,95,96,98,101],[2,73],{72:$Vo,73:$Vp,75:$Vr}),o($Vt,[2,74]),{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:[1,154]},o($VQ,[2,75],{72:$Vo,73:$Vp,74:$Vq,75:$Vr}),{70:[1,155],71:[1,156],83:157,84:$VB},o($VR,[2,85]),{22:158,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vt,[2,70]),o($Vt,[2,89]),{4:76,6:3,8:4,9:5,10:6,14:7,16:$V0,22:91,25:34,27:$V8,28:159,32:35,53:31,66:153,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vt,[2,77]),o($Vx,[2,104]),o($Vw,[2,106]),{29:[1,160]},{29:[2,108],46:$VF},{22:91,25:34,27:$V8,32:35,53:31,66:161,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{29:[1,162]},o($V4,[2,50]),o($V4,[2,51]),o($V4,[2,53]),{25:34,32:35,52:163,53:88,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{32:165,55:164,91:$Vb},o($VE,[2,57]),{22:166,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($VS,[2,84]),o($V6,[2,81],{46:$Vz}),o([5,29,34,45,46,48,65],$Vy,{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VS,[2,83],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VI,[2,14],{36:141,21:167,37:$VJ,38:$VK,40:$VL,41:$VM}),o($VI,[2,15],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),{20:168,22:169,25:101,27:$VA,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($VI,[2,20],{36:141,21:170,37:$VJ,38:$VK,40:$VL,41:$VM}),{21:171,36:141,37:$VJ,38:$VK,40:$VL,41:$VM,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs},o($VI,[2,21],{36:172,37:$VJ,38:$VK,40:$VL,41:$VM}),o($VT,[2,37]),{38:[1,173]},{20:174,25:175,27:$VU,96:$Vg},{37:[1,178],38:[1,177],42:[1,179]},{37:[1,181],38:[1,180],42:[1,182]},o($VI,[2,22],{36:172,37:$VJ,38:$VK,40:$VL,41:$VM}),o($VV,[2,27],{97:$Vv}),{25:183,96:$Vg},{31:[1,184]},{29:[1,185]},{29:[1,186]},{29:$VC,46:$VH,72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs},{29:[2,97],46:$VF},{22:187,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vt,[2,68]),{22:188,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($VR,[2,86]),{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs,85:[1,189]},{29:[1,190]},o($Vw,[2,107]),{29:[2,109],46:$VF},o($Vw,[2,105]),o($VE,[2,55]),o($V4,[2,58],{56:191,59:[1,192]}),{57:[1,193],58:[1,194]},o($VG,[2,111],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VI,[2,13],{36:172,37:$VJ,38:$VK,40:$VL,41:$VM}),o($VI,[2,16]),o($VI,[2,17],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VI,[2,23],{36:172,37:$VJ,38:$VK,40:$VL,41:$VM}),o($VI,[2,24],{36:172,37:$VJ,38:$VK,40:$VL,41:$VM}),o($VT,[2,38]),{20:195,25:175,27:$VU,96:$Vg},{39:[1,196]},{25:147,26:$VO,30:$VP,39:$VN,96:$Vg,97:$Vv},{4:197,6:3,8:4,9:5,10:6,14:7,16:$V0,22:91,25:34,27:$V8,28:150,32:35,53:31,66:153,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{20:198,25:175,27:$VU,96:$Vg},{38:[1,199]},{38:[1,200]},{20:201,25:175,27:$VU,96:$Vg},{38:[1,202]},{38:[1,203]},o($VV,[2,28],{97:$Vv}),{27:[1,204]},o($VV,[2,29]),o([5,29,34,37,38,40,41,43,45,48,65,72,73,74,75,77],$VW,{25:205,96:$Vg}),o($VQ,[2,88],{72:$Vo,73:$Vp,74:$Vq,75:$Vr}),{70:[1,206],72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs},{22:207,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($Vt,[2,76]),o($V4,[2,59]),{60:[1,208],62:[1,209]},o($VX,[2,60]),o($VX,[2,61]),{39:[1,210]},{22:211,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{29:[1,212]},{39:[1,213]},{20:214,25:175,27:$VU,96:$Vg},{20:215,25:175,27:$VU,96:$Vg},{39:[1,216]},{20:217,25:175,27:$VU,96:$Vg},{20:218,25:175,27:$VU,96:$Vg},{32:219,91:$Vb},o($VV,[2,31],{97:$Vv}),o($Vt,[2,69]),o($VR,[2,87],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),{32:165,55:220,91:$Vb},{32:165,55:221,91:$Vb},{22:222,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($VT,[2,40],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),{25:205,39:$VW,96:$Vg},{22:223,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{39:[1,224]},{39:[1,225]},{22:226,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{39:[1,227]},{39:[1,228]},{29:[1,229]},{61:[1,230]},{61:[1,231]},o($VT,[2,39],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VT,[2,41],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),{22:232,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:233,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($VT,[2,42],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),{22:234,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},{22:235,25:34,27:$V8,32:35,53:31,68:$V9,79:33,80:$Va,86:36,87:37,88:38,89:39,90:40,91:$Vb,92:$Vc,93:$Vd,94:$Ve,95:$Vf,96:$Vg,98:$Vh},o($VV,[2,32]),o($V4,[2,62]),o($V4,[2,63]),o($VT,[2,43],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VT,[2,45],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VT,[2,44],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs}),o($VT,[2,46],{72:$Vo,73:$Vp,74:$Vq,75:$Vr,77:$Vs})],
defaultActions: {9:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}